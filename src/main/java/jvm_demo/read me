F:\javaxxz\JAVAEE\【No1235】S硅谷_JVM从入门到精通\JVM上篇：内存与垃圾回收篇

13-区分栈的指令集架构和寄存器的指令集架构
在idea下面的控制台选择Terminal -> Local 中输入 下面的命令，反编译class字节码文件
1）进行字码文件目录
cd target\classes\jvm_demo\chapter01
2）反编译字节码文件
javap -v StackStruTest.class


14-JVM的生命周期
虚拟机的启动
Java虚拟机的启动是通过 引导 类加载器(bootstrap class loader) 创建一个
初始类(initial class)来完成的，这个类是由虚拟机的具体实现指定的。
虚拟机的执行
任务是执行Java程序
程序开始执行时他才运行，程序结束时他就停止 。
执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程 。
虚拟机的退出
程序正常执行结束
程序在执行过程中遇到了异常或错误而异常终止 。
某线程调用Runtime类或System类的exit方法 ，或Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作。

windows查看java进程 jps

15-SUN Classic VM的介绍
16-Exact VM的介绍
17-HotSpot VM的介绍
18-JRockit VM的介绍
19-IBM J9 VM的介绍
全称：IBM Technology for Java Virtual Machine  简称 IT4J ，内部代号：J9

如果自己手写一个Java虚拟机的话，主要考虑哪些结构呢？
类加载器和执行引擎。


第2章：类加载子系统

27-概述类的加载器及类加载过程
类加载器ClassLoader角色
1、class file 存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要
加载到jvm当中来，根据这个文件实例化出n个一模一样的实例。
2、class file加载到jvm中，被 称为DNA元数据，放在方法 区。
3、在.class文件->jvm->最终成为元数据模板，此过程就要一个运输工具(类装载器class loader)，
扮演一个快递员的角色。


加载
1、通过一个类的全限定名获取定义此类的二进制字节流。
2、将这个字节流所代表的静态存储结构转化为方法 区的运行时数据结构。
3、在内存中生成 一个代表这个类的java.lang.Class对象，作为方法这个类的
各种数据的访问入口。

链接(linking)
1)_验证(verify)
目的在于确保class文件的字节流中包含信息是否符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。
主要包括四种验证，文件 格式验证，元数据验证，字节码验证，符号引用验证。
2）准备(prepare)
为类变量分配内存并且设置该类变量的默认初始值 ，即零值。
这里不包含final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化；
这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到java堆中。
3) 解析(Resolve):
 将常量池内的符号引用转换为直接引用的过程 。





初始化
1、初始化阶段就是执行类构造器方法<clinit>()的过程。 （clinit中的cl表示class）
2、此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。
3、构造器方法 中指令按语句源文件中出现的顺序执行。
4、<clinit>()不同于类的构造器。(关联：构造器是虚拟机视角下的<init>())
5、若该类具有父类，JVM会保证子类的 <clinit>()执行前，父类的<clinit>()已经执行完毕。
6、虚拟机必须保证一个类的<clinit>()方法在多线程下被同步加锁。

装字节码查看插件
jclasslib Bytecode viewer
1、在idea中打开设置Settings -> Plugins 搜索  jclasslib Bytecode viewer
2、安装完后Build一下。
3、打开View菜单会看到Show Bytecode With jclasslib

类加载器的分类
31-几种类加载器的使用体会
 JVM支持两种类型的类加载器，分别为引导类加载器(Bootstrap ClassLoader) 和自定义类加载器(User-Defined ClassLoader)  ;
从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是java虚拟机规范却没有这么定义，而是将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器。

Bootstrap Class Loader 包含   扩展类加载器 Extension Class Loader
扩展类加载器 Extension Class Loader 包含  系统类加载器 System Class Loader

类加载器示例：
ClassLoaderTest.java

33-为什么需要用户自定义类加载器及具体实现
1） 隔离加载类
2）修改类加载的方式
3）扩展加载源
4） 防止源码泄露

35-双亲委派机制的工作原理及演示

双亲委派机制
Java虚拟机对class文件 采用的是按需加载的方式 ，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式 。

工作原理
1) 如果一个加载器收到 了类加载请求，它并不会自己去加载，而是把这个请求委托给父类的加载器去执行；
2）如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器。
3）如果父类加载器可以完成类加载任务，就成功返回。倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。


rt.jar中spi接口是 引导类加载器加载。jdbc.jar具体实现了spi接口的类是由线程上下文加载器加载
// 线程上下文加载器。
// Thread.currentThread().getContextClassLoader();

 优势
1）避免类的重复加载
2） 保护程序安全，防止核心api被随意篡改。
    自定义类：java.lang.String
    自定义类：java.lang.LhsStart (异常java.lang.SecurityException:Prohibited pakeage name:java.lang)



37-沙箱安全机制
保证对java核心源代码的保护，这就是沙箱安全机制 。

在JVM中表示两个class对象是否为同一个类存在两个必要条件 。
1) 类的完整类名必须一致，包括包名。
2）加载这个类的ClassLoader(指ClassLoader实例对象)必须相同。

对类加载器的引用
JVM必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，
那么JVM会将这个类加载器的一个引用作为类型信息的一部分保存在方法中。当解析一个类型到另一个类型的引用的时候，
JVM需要保证这两个类型的类型加载器是相同的。

42-PC寄存器的使用举例
查看字节码文件命令
javap -verbose PCRegisterTest.class

43-解决PC寄存器两个面试问题
48-局部变量表结构的认识
49-字节码中方法内部结构的剖析
51-静态变量与局部变量的对比及小结
52-操作数栈的特点
53-涉及操作数栈的字节码指令执行分析
54-栈顶缓存技术.
55-动态链接的理解与常量池的作用

第5章：虚拟机栈
55-动态链接的理解与常量池的作用.avi

F:\javaxxz\JAVAEE\【No1235】S硅谷_JVM从入门到精通
JVM上篇：内存与垃圾回收篇\视频
第9章：方法区
87-方法区概述_栈堆方法区间的交互关系.avi



www.javaxxz.com)UJ&HY^THJIog
