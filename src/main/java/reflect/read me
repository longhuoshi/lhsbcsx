

毕向东老师讲解的反射技术












dynamic_proxy

link
https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/basis/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3.md


3.1. JDK 动态代理机制
3.1.1. 介绍
在 Java 动态代理机制中 InvocationHandler 接口和 Proxy 类是核心。

Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。
这个方法一共有 3 个参数：
loader :类加载器，用于加载代理对象。
interfaces : 被代理类实现的一些接口；
h : 实现了 InvocationHandler 接口的对象；

要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。
当我们的动态代理对象调用一个方法时候，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。
invoke() 方法有下面三个参数：
proxy :动态生成的代理类
method : 与代理类对象调用的方法相对应
args : 当前 method 方法的参数

也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，
实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，
比如在方法执行前后做什么事情。

3.1.2. JDK 动态代理类使用步骤
定义一个接口及其实现类；
自定义 InvocationHandler 并重写invoke方法，在 invoke 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑；
通过 Proxy.newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h) 方法创建代理对象；


Method和Field,Constructor对象都胡setAccessible()方法。
setAccessible 作用：启动和禁用访问安全检查开关。
1、为true可以访问私有权限 的Method和Field,Constructor
2、提高 反射效率

反射操作泛型（了解既可）
为了通过反射操作泛型，java新增了以下几种类型来代表不能被归依到Class类中的类型但是又和原始类型齐名的类型。
Parameterized:表示一种参数化类型，比如Collection<String>
GenericArrayType: 表示一种元素类型是参数化类型或者类型变量的数组类型。
TypeVariable:是各种类型变量的公共父接口
WildcardType: 代表一种通配符类型表达式

练习：ORM
ORM(Object relationship Mapping) --> 对象关系映射
class Student{
    int id;
    String name;
    int age;
}
数据库表
create table db_student{
    id int ,
    name verchar(100),
    age int
}

1）类和表结构对应
2）属性和字段对应
3） 对象 和记录对应

要求：利用注解和反射完成类和表结构的映射关系 。






