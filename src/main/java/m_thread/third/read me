D:\javaxxz\javaEE\【No1417】大厂面试之JUC并发编程与源码分析教程\
jucbase java高级技术JUC高并发编程

多线程操作步骤
1、 创建资源类，在资源类创建属性和方法。
2、在资源类操作方法
    判断->干活->通知 。
3、创建多个线程，调用 资源类中的操作方法。
4、防止虚假唤醒问题。


08-JUC高并发编程-线程间通信-概述和案例分析.mp4
12-JUC高并发编程-线程间定制化通信-案例分析
示例
启动三个线程，按照如下要求
AA打印5次，BB打印10次，CC打印15次
AA打印5次，BB打印10次，CC打印15次
进行10轮

解：
定义 一个标致位flag
1、AA线程 判断flag=1，打印5次。修改标致位flag=2，通知BB
2、BB线程 判断flag=2，打印5次。修改标致位flag=3，通知CC
3、CC线程 判断flag=3，打印5次。修改标致位flag=1，通知AA

13-JUC高并发编程-线程间定制化通信-案例实现
14-JUC高并发编程-集合线程安全-异常演示
16-JUC高并发编程-集合线程安全-ArrayList线程不安全和解决方案（二）
17-JUC高并发编程-集合线程安全-HashSet和HashMap线程不安全
18-JUC高并发编程-多线程锁-Synchronized锁的八种情况
19-JUC高并发编程-多线程锁-公平锁和非公平锁
非公平锁:线程饿死
        效率高
公平锁：阳光普照
       效率相对低。
       new ReentrantLock(true)

21-JUC高并发编程-多线程锁-可重入锁（2）
22-JUC高并发编程-多线程锁-死锁
两个或两个以上的进程(线程)在执行过程中，因为争夺资源而造 成一种互相等待的现象 ，
如果 没有外力干涉，他们无法再执行下去 。
产生死锁原因：
第一 系统资源不足
第二 进程运行推进顺序不合适
第三 资源分配不当。

 验证是否是死锁？
 1) jps  类似linux ps -ef   查看程序对应的进程 id
   jps -l
 2) jstack jvm自带堆栈跟踪工具。
   jstack 进程id

23-JUC高并发编程-Callable接口-概述
Runnable和Callable接口
1）是否有返回值
2） 是否拋出异常
3）实现方法名称不同，一个是run方法，一个是call方法

26-JUC高并发编程-辅助类（CountDownLatch)
    减少计数
27-JUC高并发编程-辅助类（CyclicBarrier）
   循环栅栏
   示例：集齐7颗龙珠就可以召唤神龙。
28-JUC高并发编程-辅助类（Semaphore）
29-JUC高并发编程-读写锁-概述
30-JUC高并发编程-读写锁-案例实现
一个资源可以被多个读线程访问，或者可以被一个写线程访问，但是不能同时
存在读写线程。读写互斥，读读共享。
缺点：
1）造成锁饥饿，一直读，没有写操作。
2）读时候，不能写，只有读完之后才能写。

锁降级：将写入锁降级为读锁。读锁不能升级为写锁。
jdk8说明 ：获取写锁->获取读锁->释放写锁->释放读锁

35-JUC高并发编程-阻塞队列-核心方法演示
36-JUC高并发编程-线程池-概述和架构













www.javaxxz.com_I(*U6y%$refg



jucadvance JUC并发编程与源码分析








