E:\learn\java\【No996】2020年最新 Java多线程编程核心基础

09.多线程编程基础-停止线程-使用interrupt方法中断线程
interrupt不会真正停止线程，而是在当前线程上打上一个停止标记。
Thread提供interrupted方法检测当前线程是否中断，isInterrupted方法测试线程是否已经中断。
注意：interrupt只对 执行任务的线程里有 Thread.sleep(20000); 才会终止线程并抛异常InterruptedException。
注意：java会忽略 循环体对里面 只有 new String() 空字符串的代码。

10.多线程编程基础-暂停线程
暂停线程使用suspend,重启暂停线程使用resume方法
为何要废弃?
1、suspend如果独占公共的同步对象，使其它线程无法访问公共同步对象。

11.多线程编程基础-yield方法
yield方法的作用是放弃（放弃的时间不确定）当前的cpu资源 ，将资源让给其它 任务去占用cpu执行。


线程的优先级
12.多线程编程基础-线程的优先级
设置线程的优先级setPriority方法，优先级分为1-10个级别。如果 设置优先级小于1大于10,JDK抛出illegalArgumentException。
JDK默认3个优先级常。MIN_PRIORITY=1（最小值）,NORM_PRIORITY=5（中间值，默认）,MAX_PRIORITY =10（最大值）
线程的优先级具有继承性，比如线程A启动线程B，线程B的优先级与线程A是一样的。

13.多线程编程基础-守护线程
setDaemon设置为守护线程。 垃圾回收器就是守护线程。
注意：要在start之前设置，否则 会报IllegalThreadStateException


线程安全：
14.线程的同步机制-synchronized同步方法-局部变量为线程安全
1、局部变量，永远是线程安全的。这是由局部变量是私有的特征所造成的。
2、成员变量不是线程安全的。需要在操作成员变量的方法前加synchronized锁来保证线程的安全。

16.线程的同步机制-synchronized同步方法-多个对象使用多个对象锁
synchronized取得的锁都是对象锁。多个线程访问多个对象，JVM会创建出多个对象锁。

17.线程的同步机制-synchronized同步方法-synchronized方法锁定的是整个对象
A线先持有Object对象的对象锁，B线程就不可以异步方式 调用 Object对象使用synchronized修饰 的方法(因为synchronized用的就是Object对象的对象锁)。
线程B只有等线程A的方法执行完，释放Object对象的对象锁才能执行。

18.线程的同步机制-synchronized同步方法-脏读
Demo05
 synchronized用的是对象锁，同一个对象上加了synchronized的方法。是排队执行的，
 不管多少个线程执行，都要等拿 到锁的线程 把一个方法执行完，下个拿到锁的线程才能执行下一个方法。


19.线程的同步机制-synchronized同步方法-锁重入
synchronized拥有锁重入的功能 ，就是说在使用synchronized时，当一个线程得到一个对象锁后，
再次请求这个对象锁时是可以再次得到该 对象锁。

锁重入性，线程调用 一个加锁的方法，要进入这个锁对象的另一个方法。
*有继承性。

21.线程的同步机制-synchronized同步方法-锁自动释放
当一个线程执行的代码出现了异常，其所有的锁会自动 释放。

22.线程的同步机制-synchronized同步方法-同步不具有继承性

23.线程的同步机制-synchronized同步语句-synchronized方法的缺点
25.线程的同步机制-synchronized同步语句-使用同步代码块解决同步方法的弊端

30.线程的同步机制-synchronized同步语句-静态同步synchronized方法与synchronized(class)代码块
静态方法使用的synchronized锁是class
非静态方法使用的synchronized锁是this


32.线程的同步机制-synchronized同步语句-解决synchronized方法无限等待问题
33.线程的同步机制-synchronized同步语句-死锁
所谓死锁，是指多个线程在运行过程中因争夺资源而造成的一种僵局，当线程处于这种僵持的状态时，如果没有外力作用，这些线程都无法再继续运行。

死锁产生的原因：

1. 系统资源的竞争
系统资源的竞争会导致系统资源不足，以及资源分配当，导致死锁。
2. 线程运行的顺序不合适
线程在运行过程中请求和释放资源的顺序不当，会导致死锁。

产生死锁的必要条件：
a. 互斥条件：线程要求对所分配的资源进行排它性控制，即在一段时间内某个资源仅为一个线程所占用。
b. 请求和操持条件：当线程因请求资源而阻塞时，对已经获得的资源保持不放。
c. 不剥夺条件：线程已经获得的资源在未使用之前，不能剥夺，只能在使用完时由自己来释放。
d. 环路等待条件：在发生死锁时，必然存在一个线程等待另一个线程的环形链(lock1=>lock2=>lock1)


35.线程的同步机制-volatile关键字
volatile主要作用是使变量可以在多个线程间见

如果下面的代码运行在服务器模式(JDK8及以上版本默认就是使用服务器模式( Server VM)、
JDK7默认使用的客户端模式)中的JVM时就会出现死循环。
Demo26volatile.java


在启动线程是，变量public boolean flag=true存在在公共堆栈及线程的私有堆栈中。当使用服务器模式时为了线程运行的效率，
线程一直在私有堆栈中取得flag的值一直都是true。当执行service.flag=false时，虽然被执行，更新的却是在公共堆栈中的flag，
所以一直是死循环的状态。使用volatile修饰成员变量后，强制虚拟机从公共堆栈中获取变量的值。

synchronize和volatile区别：
1) volatile是线程同步的轻易级实现，它的性能比synchronized要好，并且volatile只能修饰变量。而synchronized可以修饰方法及代码块。
   随着JDK的版本更新，synchronized在执行效率也得到很大的提升，在开发中synchronized的使用率还是较高
2) 多线程访问volatile不会发生阻塞，而synhcronized会出现阻塞
3) volatile能保证数据的可见性，不能保证原子性，而synchronized可以保证原子性，也可以间接保证可见性，因为它会将私有内存和公共内存中的数据做同步。
4) volatile解决的是变量在多个线程之见的可见性，而synchronized是解决多个线程之间访问资源的同步性。


参考https://blog.csdn.net/canot/article/details/51295228
并发编程中的三个概念
1.原子性
　原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。
2.可见性
　可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。
3.有序性
有序性：即程序执行的顺序按照代码的先后顺序执行。

指令重排序（Instruction Reorder）
一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，
但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。

volatile关键字的两层语义
1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某 个变量的值，这新值对其他线程来说是立即可见的。
2）禁止进行指令重排序。



第三章
36.线程间的通信-wait与notify-不使用wait与notifty实现线程间通讯有什么问题
chapter3.Demo01volatile.java
虽然两个线程间通信实现了，但是有一个弊端，线程B需要不停地通过while语句轮询来检测一个条件，这样做会浪费CPU资源。
如果轮询的时间间很小，更浪费CPU资源，如果轮询的时间间隔很大，有可能会取不到想要到的数据。
所以就需要有一种机制 来实现减少CPU的资源浪费，而且还可以实现在多个线程间通信，它就是『wait/notify』机制。


38.线程间的通信-wait与notify-wait与notifty机制的实现
notify和wait方法都 要放在同步方法或同步代码块中使用，否则会报IllegalMonitorStateException
chapter3.Demo03notify.java
1、notify代码块的锁对象必须要跟wait所在同步代码块的锁一致，否则报 IllegalMonitorStateException
2、要等notify所在的synchronized代码块执行完成，才会执行被notify唤醒的线程。

39.线程间的通信-wait与notify-wait方法自动释放锁与notify方法不会释放锁
1、 wait方法自动释放锁与notify方法不会释放锁

40.线程间的通信-wait与notify-wait方法遇到intterrup方法
当线程呈wait状态时，调用线程对象的interrupt方法会产生InterruptedException异常。

41.线程间的通信-wait与notify-只唤醒一个线程或所有线程

42.线程间的通信-wait与notify-wait(long)的使用
带一个long参数的方法的作用等待某一时间内是否有线程对象锁进行唤醒，如果超过这个等待时间线程会自动唤醒。
chapter3.Demo05.java
sleep(long)与wait(long)非常想象，都是在指定的时间后线程会自动唤醒，区别在于sleep是不会释放对象锁，而wait方法可以释放对象锁。

45.线程间的通信-生产者与消费者模式-一个生产者与一个消费者(操作值)
48.线程间的通信-生产者与消费者模式-一生产者多消费者(操作集合)
51.线程间的通信-join方法- join方法的使用
Demo15join.java
在很多情况下，都由主线程创建并运行子线程，如果子线程中需要进行大量的耗时运行，主线程往往将早于子线程结束。
这时，如果主线程想等待子线程执行完成后再结束，比如子线处理一个数据，主线程需要取得这个数据中的值，
可以使用join方法。join方法的作用是等待线程对象销毁。
join与synchroinzed区别：
join的内部使用wait方法进行等待，而synchronized关键字使用的是『对象锁』的机制作为同步。

52.线程间的通信-join方法-join方法与异常
Demo16join.java
join与interrupte方法如果彼此遇到，则会出现异常，但进程并没有结束，原因是ThreadA还在继续运行，线程A并没有出现 异常，是正常状态下继续 执行。

使用join(2000)与sleep(2000)有什么区别？运行效果没有任何区别，但是同步的处理上不一样，sleep不释放锁，而join底层是使用wait来实现所以会释放锁

52.线程间的通信-join方法- join(long)与sleep(long)的区别

方法join(long)的功能在内部使用wait(long)来实现同步，所以joing(long)方法具有释放同步锁的特点。

53.线程间的通信-join方法-ThreadLocal类

变量值共享可以使用静态变量形式，所有的线程都可以使用同一个静态变量。如果想实现每一个线程都有自己的共享变量如何解决？
Java提供ThreadLocal类来解决这个问题。
ThreadLocal类主要解决每个线程绑定自己的值，可以将ThreadLocal类比喻成全局存储数据的盒子，盒子中可以存储每个线程的私有数据 。
Demo20threadLocal.java

54.Lock-ReentranLock-使用RenntranLock

55.Lock-ReentranLock-使用RenntranLock实现wait和notify
关键字synchronized与wait/notify或notifyAll方法想结合可以实现等待/通知模式，类RentrantLock也可以实现同样的功能，但需要借助Condition对象。Condition类是在JDK5中出现的技术，
使用它有更好的灵活性，比如可以实现多路通知功能，也就是在一个Lock对象里面可以创建多个Condition实例，线程对象可以注册在指定的Condition中，
从而可以有选择性地进行线程通知，在调试线程上更加灵活。
在使用notify/notifyAll方法进行通知时，被通知线程是由JVM随机选择的，但使用ReentrantLock结合Condition类可以实现选择性通知，这个功能是非常重要的，而且在Condition在中是默认提供的。
而synchronized就相当于整个Lock对象中只有一个单一Condition对象，所有的线程都是注册在它一个对象的身上。线程开始notifyAll时需要通知所有正在等待的线程，没有选择权，会出现相当大效率问题。
chapter4.Demo03condition.java


56.Lock-ReentranLock-使用多个Condition实现通知部分线程
3. 使用Condition唤醒不同的线程
Demo04condition.java
分别唤醒不同的线程，就需要使用多个Condition对象，也就是Condition对象可以唤醒部分指定的线程，有助于提升程序的运行效率。

57.Lock-ReentranLock-使用Lock实现生产者、消费者
多生产多消费
Demo05producerConsumer

58.Lock-ReentranLock-公平锁与非公平锁
60.Lock-ReentranLock-ReentrantReadWriteLock

类ReentrantLock具有完全互斥排他锁，也就是同一时间内只有一个线程可以在执行Reentrant.lock方法后面的任务。这样虽然可以保证实例变量的线程安全性，
但是效率却是非常的低下。所以在JDK中提供了一种读写锁ReentrantReadWriteLock类，使用它可以加快运行的效率，在某些不需要操作实例变量的方法中，
完全可以使用读写锁来提升方法的代码运行效率。
读写锁表示有两个锁，一个是读操作也称作共享锁，另一个是写操作也叫排他锁。 也就是多个读锁之间不互斥，读锁与写锁是互斥，写锁与写锁之间也是互斥的。
在没有线程进入定入操作时，进行读取操作的多个线程都可以获取 读取锁，而进行写入操作时只有在获取写锁后才能进行写入操作。即可以有多个线程同时进行读取操作，
但同一时内只能有一个线程进行写操作。
Demo08ReentrantReadWriteLock.java
读写或写读操作都是互斥的，只要出现 写操作的过程，就是互斥的。读读是共享的。





### 5.1 线程的状态

| 状态         | 描述                                                     |
| ------------ | -------------------------------------------------------- |
| NEW          | 尚未启动的线程处于这种状态                               |
| RUNNABLE     | 在Java虚拟机中正在执行的线程处于此状态                   |
| BLOCKED      | 补阻塞等待对象锁的线程处于此状态                         |
| WAITING      | 正在等待另一个线程执行特定动作的线程处于h此x状态         |
| TIME_WAITING | (超时)正在等待另一个线程执行达到指定的等待时间的线程处于此状态 |
| TERMINATED   |(结束) 已经退出运行的线程处于此状态                             |
ready   就绪状态




62.拾遗增补-线程的状态-通过代码验证





www.javaxxz.com_OK*&^u8%F



